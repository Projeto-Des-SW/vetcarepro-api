generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusSchedule {
  SCHEDULED
  EXPIRES
  FINISHED
}

enum Tiers {
  TIER_ONE
  TIER_TWO
  TIER_THREE
}

enum Roles {
  MANAGER
  VETERINARY
  SECRETARY
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password_hash String
  status        Boolean  @default(true)
  onboarding    Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())

  clinics Clinic[]

  @@map("users")
}

model Employee {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  password_hash     String
  position          String
  salary            String
  last_payment_date DateTime?
  status            Boolean   @default(true)
  onboarding        Boolean   @default(false)
  role              Roles     @default(MANAGER)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())

  clinic    Clinic @relation(fields: [clinic_id], references: [id])
  clinic_id String

  schedules Schedule[]

  @@map("employees")
}

model Clinic {
  id          String   @id @default(uuid())
  title       String   @unique
  cnpj        String   @unique
  email       String
  phone       String
  description String
  address     String
  status      Boolean  @default(true)
  tier        Tiers    @default(TIER_ONE)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  employees Employee[]
  patients  Patient[]
  services  Service[]
  schedules Schedule[]
  products  Product[]
  sales     Sale[]

  @@map("clinics")
}

model Patient {
  id               String   @id @default(uuid())
  name             String
  species          String
  age              String
  breed            String
  guardian_name    String
  guardian_cpf     String
  guardian_contact String
  status           Boolean  @default(true)
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())

  clinic    Clinic @relation(fields: [clinic_id], references: [id])
  clinic_id String

  schedules Schedule[]
  sales     Sale[]

  @@unique([name, clinic_id])
  @@map("patients")
}

model Service {
  id         String   @id @default(uuid())
  title      String
  type       String
  amount     String
  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  clinic    Clinic @relation(fields: [clinic_id], references: [id])
  clinic_id String

  schedules Schedule[]

  @@unique([title, clinic_id])
  @@map("services")
}

model Schedule {
  id              String         @id @default(uuid())
  date            DateTime
  status_schedule StatusSchedule @default(SCHEDULED)
  created_at      DateTime       @default(now())
  updated_at      DateTime       @default(now())

  clinic      Clinic   @relation(fields: [clinic_id], references: [id])
  clinic_id   String
  patient     Patient  @relation(fields: [patient_id], references: [id])
  patient_id  String
  employee    Employee @relation(fields: [employee_id], references: [id])
  employee_id String
  service     Service  @relation(fields: [service_id], references: [id])
  service_id  String

  @@map("schedules")
}

model Product {
  id         String   @id @default(uuid())
  title      String
  amount     String
  quantity   Int
  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  clinic    Clinic @relation(fields: [clinic_id], references: [id])
  clinic_id String

  sales Sale[] @relation("SalesProducts")

  @@unique([title, clinic_id])
  @@map("products")
}

model Sale {
  id         String   @id @default(uuid())
  amount     String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  clinic     Clinic  @relation(fields: [clinic_id], references: [id])
  clinic_id  String
  patient    Patient @relation(fields: [patient_id], references: [id])
  patient_id String

  products Product[] @relation("SalesProducts")

  @@map("sales")
}
